コマンド問題集(3)


⚪︎ユーザのログイン履歴を表示する     last
⚪︎fileAとfileBを差分表示する diff
⚪︎psをpslogに保存しつつ、画面にも出力する tee
⚪︎pslogにlsを追記して画面にも出力する
⚪︎date, pwdを１行で実行する
⚪︎fileを二行づつ列にして、出力する
⚪︎上で作ったのを展開する
⚪︎installとcopyコマンドの違いは

●diffコマンドを使う
⚪︎以下のようなデータをsed.datとして保存する
japan
america
canada
echo -e 'japan\namerica\ncanada' | tee sed.dat
⚪︎sed.datのcanadaをchinaに変える。変える前のファイルをsed.dat.originalとして変えた後のをsed.datとする
sed -i.original 's/canada/china/' sed.dat
⚪︎2つのファイルの差分を見る
diff -u sed.dat.original sed.dat

●文字コードの違いを知る。wc,echoコマンドを使う
⚪︎ファイルに "a"を10個書いてascii.datとして保存する。改行は含まない。　
for i in `seq 10`;do echo -n "a" >> ascii.dat;done 
⚪︎確認のために、行数、単語数、文字数を確認する(0  1  10)になる
cat ascii.dat | wc
⚪︎ちなみにはじめのコードを以下のようにすると間違いだが、なぜか？
for i in `seq 10`;do echo -n  a  >> ascii.dat;done
⚪︎ファイルに "あ" を10個書いてhiragana.datとして保存する。改行は含まない。
for i in `seq 10`;do echo -n "あ" >> hiragana.dat;done 
⚪︎確認のために、行数、単語数、文字数を確認する(0  1  ?)になる
cat hiragana.dat | wc
⚪︎文字数が10にならないが、なぜか？どうしたら文字数になるか？
デフォルトでは文字数でなく、バイト数になるため
cat hiragana.dat | wc -m
⚪︎ls -lhをすると二つの文字の数は同じだが、バイト数が異なるのはなぜか？
⚪︎上でしたことを、文字を改行でやるとどうなるか？
⚪︎ファイルに "é" を10個書いてgirisha.datとして保存する。改行は含まない。
for i in `seq 10`;do echo -n "é" >> girisha.dat;done 

●dfコマンドを使う
⚪︎Appleメニューのストレージとdfコマンドのストレージを比較する
 　空き容量はAppleメニューからの方が大きくなる。これはdfコマンドではスナップショット(APFS)の分も使用容量に入れているため、dfコマンドの方が残り容量は小さくなる
⚪︎dfに出てくるFilesystemとは？Mounted onとは？
⚪︎USBを挿すと、どこにマウントされる？   /dev/disk2s1

●データの増加を見る。新しいディレクトリ(dir/dir2)を作って、そこでする。
⚪︎ディレクトリの容量(空の状態)を見る   du -h
⚪︎dir2に適当に空のファイルを1000個作る   touch file{1..1000}
⚪︎容量は変わっているか？     du -h または  ls -lh
⚪︎ディスクの容量をfile1000.datとしてdirに保存後、ファイル1000個を削除
	df -h > ../file1000.dat | rm *
⚪︎ディスクの容量をfile0.datとして保存      df -h > ../file0.dat
⚪︎2つのファイルを比べて何が変わっているか？この差は何か？
　各ファイルにはinode番号が振られていて、そのファイルの各種属性(メタデータ)は、inodeテーブルという別の領域に保存されるため容量に差が出る
⚪︎diffコマンドで差を見る  diff file0.dat file1000.dat
⚪︎今までやったのはファイルだがディレクトリでするとどうなる？
    ディレクトリも基本的にファイルと同じでメタデータを持つので、作成すると容量は増加する。ディレクトリではinodeテーブルにあたるのをディレクトリエントリと呼ぶ

●ランダムに0~9をデータを作り出す
⚪︎sortを使う                        seq 9 | sort -R
⚪︎/dev/urandomを使う     grep -oa '[0-9]'  /dev/urandom

●xargsコマンドを使う
⚪︎1~10を改行せずに並べる   seq 10 | xargs
⚪︎以下のように1~10に並べる           
1 2
3 4
 ~
seq 10 | xargs -n 2
⚪︎以下の２つのコマンドは異なるか否か？
for i in `seq 9`;do echo $i;done
for i in `seq 9 |xargs `;do echo $i;done
同じ

●curlコマンドを使う。サイトはhttp://www.example.com/
⚪︎html.txtとして保存 
curl http://www.example.com/ > html.txt または curl -o html.txt http://www.example.com/
⚪︎html.txtとして保存するが、出力表示はしない
curl -s http://www.example.com/ > html.txt または curl -s -o html.txt http://www.example.com/
⚪︎ブラウザで F12 押してElementとcurlを比較
⚪︎HTTPレスポンスヘッダーのみ取得
curl -I http://www.example.com/
⚪︎詳細(ヘッダーとhtml)を出力する
curl -v http://www.example.com/
⚪︎終了ステータスのみを表示する
curl -s http://www.example.com/  -o /dev/null -w '%{http_code}\n'

●awkコマンドの基本
⚪︎２,4列目を表示
⚪︎最終列を表示
⚪︎コマンドの頭が[c]を抜き出す
⚪︎時間の分だけを抜きだす    awk -F'[ :]' '{print 

●awk,tail, aliasコマンドを使う
⚪︎ヒアドキュメントで以下のtest.csvを作る

name, kokugo, sugaku
nakaya, 90, 80
satou, 45, 60
suzuki, 50, 90

⚪︎一行目を除いて出力する      tail -n +2 test.csv
⚪︎上のコマンドをdataという名前でaliasにする     alias data='tail -n +2 test.csv'
⚪︎名前だけを表示                      data | awk -F, ‘{print $1}’ 
⚪︎各行の2列目と3列目を合計して表示    data |  awk -F, ‘{print $2 + $3}’ 
⚪︎3列目の合計を求めて表示       data |  awk -F,  ‘ {sum += $NF} END{print sum}’ 
⚪︎aliasを解除する               unalias data

●区切り文字のまとめawk, cut, sedを使う。以下のデータ(data)を作ってファイルにする
xxxxxxx  # yyyyyyy  zzzz  
⚪︎cutで#以降を取り出す      cut -d '#' -f 2 data
⚪︎awkで#以降を取り出す     awk -F'#' '{print $2}' data
⚪︎sedで#以降を取り出す     sed -E 's/.*#(.*)/\1/' data

●データの一部分だけ抜きだす。
⚪︎以下のようなデータを作って、data.datとして保存する
f,150,40
m,170,65
m,182,78
⚪︎身長(2列目)の列だけを抜きだす
awk -F, {print $2} data.dat
grep -o '1[0-9].' data.dat
⚪︎体重65の行だけを抜きだす
awk -F, '$3 == 65' data.dat
grep 65 .data.dat
⚪︎最後の列だけを抜きだす
awk -F, {print $NF} data.dat
grep -oE '[0-9]+$' data.dat
⚪︎身長が160以上の行だけ抜き出す
awk -F, '$2 > 160' data.dat
grep -E '1[6-9].' data.dat

●more,lessコマンドを使う。ただしlessコマンドの方が有能なのでlessを使う。NASA_access_log_Jul95ファイルを使う
⚪︎ファイルを開けて、1ページづつ見る　　スペースを押す
⚪︎閉じる　　　　　q

●head, tailコマンドを使う。
⚪︎縦に100行の1~100のnum.txtファイルを作る
⚪︎はじめから10行まで出力する   head num.txt
⚪︎はじめから5行まで出力する    head -n 5  num.txt
⚪︎最後の5行を出力する         tail -n -5  num.txt
⚪︎はじめの10行以降を出力する     tail -n +10 num.txt 
⚪︎もう一つターミナルを立ち上げて同じファイルに書いて、常に最新に更新する

●zipコマンドを使う。新しいディレクトリを使う。

dir--new
     |-old

⚪︎oldディレクトリでファイルの中身に Hello world と書いたのをfile_1~file_500までの名前で500個作る。         for  i in `seq 500`; do echo 'hello world' > file_${i} ;done
⚪︎全部のファイルサイズを測定する              du -sh
⚪︎oldディレクトリのファイルをold.zipとして圧縮する    cd .. ; zip -r old.zip old
⚪︎old.zipファイルサイズを測定する        du -h old.zip
⚪︎old.zipをnewディレクトリに移動させる          mv old.zip   new
⚪︎old.zipを展開する             cd new ; unzip  old.zip

dir--new--old--file1~500
     |         |-old.zip
     |   
     |-old--file1~500

●gzip,gunzipコマンドを使う
⚪︎容量のあるfileを一つ作る for i in `seq 1000`;do echo "Hello world" >> hello.txt;done
⚪︎容量を確認する   ls -lh hello.txt   または   du -sh hello.txt
⚪︎圧縮する    gzip hello.txt
⚪︎容量を確認する   ls -lh hello.txt   または   du -sh hello.txt
⚪︎解凍する     gunzip hello.txt.gz

●tarコマンドを使う
dir--dir2--ファイル10個

⚪︎容量のあるfileを10個作る for i in `seq 10`;do echo `seq 1000` > file_$i;done
⚪︎容量を確認する   ls -lh dir2   または   du -sh dir2
⚪︎圧縮する    tar cf dir2.tar dir2
⚪︎容量を確認する   ls -lh dir2.tar   または   du -sh dir2.tar
⚪︎dir2ディレクトリを削除する  rm -rf dir2
⚪︎解凍する      tar xf dir2.tar

●pingを使う
⚪︎自分のインターフェイスが生きてるかチェック(３回)
⚪︎自分のパソコンのプライベートIPアドレスをチェックする
⚪︎上のIPアドレスが生きてるかチェックする(３回)
⚪︎同じ場所に飛ばしているのに時間が異なるのはなぜか？また、この違いは何か？
⚪︎TTLとは？         データを通るたびに減っていく
⚪︎プロトコルは何？　　　icmp
⚪︎パケット消失率は？   packet lossを見る

⚪︎www.example.comのIPアドレスを調べる
⚪︎上で調べたアドレスのルートを調べる

●サーバーを立ててアクセスする
Macでsudoを使えるようにしておく　https://support.apple.com/ja-jp/HT204012

特定のディレクトリを作って、そこにindex.htmlを作って、中に以下を書く。

cat <<EOF> index.html
<!docktype html>
<html>
<body>
<h1>Hello world</h1>
</body>
</html>
EOF

⚪︎pythonでサーバを起動する
⚪︎ncコマンドでレスポンスを取得する
⚪︎curlコマンドでレスポンスを取得する
⚪︎ブラウザで見る

●ifconfigコマンドを使う
⚪︎localhost(lo0)をdownさせる   sudo ifconfig lo0  down
⚪︎downしている一覧を見る           ifconfig -d
⚪︎pingを飛ばしてからupさせる      sudo ifconfig lo0 up
⚪︎upしているのを見る                     ifconfig -u

●digコマンドを使う、サイトは www.example.com を使う
⚪︎ip6アドレスを調べる       dig  AAAA www.exmple.com
⚪︎ipアドレスからドメインネームを調べる      dig -x 93.184.216.34
⚪︎権威DNSサーバーを調べる             dig www.exmple.com ns
⚪︎権威DNSサーバーからipアドレスを調べる      dig @ns.icann.org  www.example.com

●netstatコマンドを使う
⚪︎デフォルトゲートウェーイやMacアドレスを知るには？
netstat -rn
⚪︎TCPコネクションの確認
netstat  -an  -p tcp
⚪︎
⚪︎

●ncコマンドを使う
︎︎⚪︎ncコマンドは何の略
netcat

●macアドレスを調べる
⚪︎netstatとarpを使う
netstat -rn    arp -an

●ネットワークの応用
⚪︎ネットワークデバイスを調べる。以下のように出力する
en0
en1
lo0
tcpdump -D |awk '{print $1}' | sed 's/^[0-9][0-9]*\.//'

● シェル応用
⚪︎シグナル番号を調べる    trap -l
⚪︎4進数の12と８進数の34を足して１６進数で表示     printf  “0x%x\n” $((4#12 + 8#34))
⚪︎
