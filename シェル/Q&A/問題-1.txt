コマンド問題集(1)

●ターミナルの使い方
⚪︎ターミナルでカーソルを一つ前に動かす、次に後ろに動かす
⚪︎ターミナルでカーソルを一番前に動かす、次に一番後ろに動かす
⚪︎ターミナルでカーソル位置から行頭までを削除(カット)する
⚪︎ターミナルで上で削除した内容を挿入(ヤンク)する
⚪︎同じディレクトリにあるファイルやディレクトリなどの補完機能は
⚪︎ターミナルを横に分割する。そして戻す　command + d , command + shift + d

●コマンドの基礎
⚪︎python3コマンドのPATHはどこに通っているか
⚪︎Shellを一時的にbashに変える。次にpythonに変える。戻る
⚪︎ルートディレクトリからの一覧をアルファベット順に並べる
⚪︎日付入りの空のファイルを作る
⚪︎「TEST ＝test」を一時的に環境変数に設定する
⚪︎上で設定したgrepで抜き出して確認する
⚪︎ルートディレクトリのファイルを一行1ファイルで出力する
⚪︎/desktop からtest1フォルダに移動、成功したらOKを出力する
⚪︎使用できるメモリ量は何コマンドのどこを見るか
⚪︎Chromeのプロセスを止めるコマンドは
⚪︎access.logとdrink.txtを結合して表示
⚪︎自分の使っているシェルを確認する
⚪︎ユーザーディレクトリ直下のファイルの単語数をカウントする
⚪︎~/Desktop/test1/test2のフォルダのにfile_a.txtとfile_b.txtを作る
⚪︎環境変数のファイルをデスクトップに[env.txt]で保存
⚪︎env.txtからパイプラインの環境変数PATHの行を抜き出す
⚪︎空のディレクトリを確認する方法は
⚪︎ファイルを空にする
⚪︎カレントディレクトリ以下のディスク容量の合計だけを表示する
⚪︎echo’Hello’を書いた、echo.txtを作って実行する       source echo.txt
⚪︎組込みコマンドだけで/usrを改行して出力する for i in $(cd /usr; echo *); do echo $i;done

●外部コマンドと組込みコマンド
⚪︎組込みコマンドの一覧を調べるのは    help
⚪︎
⚪︎
⚪︎

●コマンドを使う
⚪︎

●cdコマンドを使う
⚪︎カレントディレクトリから一つ上に行く
⚪︎

●fileを作る
⚪︎中身が空のfileを作る2つの方法で     touch file または  > file2

●echoコマンドを使う
⚪︎現在地がどこか      echo $PWD
⚪︎a,b,cを縦に出力する               echo -e  'a\nb\nc'
⚪︎行末の改行を出力しない           echo -n  'hello'

●historyコマンドを使う
⚪︎過去のコマンドを10個出力する      history 10
⚪︎過去のコマンド履歴はどこに保存されている
⚪︎過去のコマンドで見た下から３番目のヒストリ番号で実行する   !num
⚪︎過去のコマンドでfor文を使ったのを呼び出す history  | grep for

●標準入出力と/dev/null
⚪︎ls /nakaya でエラーになるので error.txt に書き込む
⚪︎ls /nakaya でエラーも標準出力も同じaccess.logに書き込む
⚪︎エラーメッセージだけを出力する    ls / /nakaya > /dev/null
⚪︎エラーメッセージだけを非出力する      ls / /nakaya 2> /dev/null

●dateコマンドを使う
⚪︎年/月/日で表示する    date "+%Y/%m/%d"
⚪︎時:分で表示する          date "+%H:%M"
⚪︎月-日.txtのファイル名を作る     touch $(date "+%m-%d").txt

●catコマンドを使う。ここで作ったファイルは以降も使う
⚪︎以下の内容のfileを作る。command + dで抜ける
12 13
14 15
⚪︎以下の内容のnum.csvを作る。EOFで抜ける
10, 20, 30
20, 30, 40
30, 40, 50

●psコマンドを使う
⚪︎今動いている、ユーザのプロセスはいくつあるか  ps 
⚪︎今動いているシステムのプロセスはいくつあるか   ps aux
⚪︎ttは何、？？は何
⚪︎プロセスを詳細に表示する    ps -l
⚪︎詳細表示のNIは何か

●copy, moveコマンドを使う。(dir作成、移動後はcdコマンドは使わない)
⚪︎以下のディレクトリ、ファイルをつくる  mkdir dir; cd dir; mkdir dir2 dir3; touch fileA fileB
dir-|-dir2
      |-fileA
      |-fileB
      |-dir3
⚪︎dir2にfileA, fileBをコピーする  cp fileA fileB dir2
⚪︎dir3の下にdir2をコピーする   cp -R dir2 dir3
⚪︎dir/dir2にあるfileAをdirにfileCに名前を変えてコピーする   cp dir2/fileA ./fileC
⚪︎dirにあるfileAをfileDに名前を変える mv fileA fileD
⚪︎fileDをdir2に移動させる   mv fileD dir2
⚪︎dir3/dir2のfileAをdirに移動する  mv dir3/dir2/fileA .
⚪︎dirのディレクトリを全て表示して以下とあってるか確かめる　ls -R
dir-|-dir2-|-fileA
      |          |-fileB
      |          |-fileD
      |
      |-dir3-dir2
      |-fileA
      |-fileB
      |-fileC
⚪︎dirを削除する    rm -rf dir

●ここからはgrepとaccess.logファイルを使う
⚪︎.comだけの行を行番号をつけて抜き出す
⚪︎.com以外の行を抜き出す
⚪︎.orgだけの行を抜き出す
⚪︎数値の入ったのだけを抜き出す
⚪︎test.example.netとtest.example.netだけを抜き出す
⚪︎数値の１と３だけの行だけを抜け出す
⚪︎行頭がnetだけを取り出す
⚪︎行末がnetだけを取り出す
●ここからはgrepとdrink.txtファイルを使う
⚪︎BrとBerを抜き出す
⚪︎BeerとBeerBeerとBeerBeerBeerを抜き出す
⚪︎VodkaとWineを含むのを抜き出す
⚪︎ber、Berのように大文字、小文字を区別なく抜き出す
⚪︎ある特定の文字列をカレントディレクトリから以下のファイルに再帰して探す
●ここからはgrepとtest_grepディレクトリを使う
⚪︎Helloと書いてるfileを抜き出す       grep -r Hello test_grep  or  grep -l Hello test_grep/*.txt

●NASA_access_log_Jul95ファイルを使う
⚪︎.netまたは.comを抜きだす
grep -E '(.net |.com)' log
⚪︎ipadressの頭が2のだけ抜きだす
grep -E '^2' log
⚪︎一番最後の数字が3桁のだけ取り出す
grep -E ' [0-9]..$' log
⚪︎domain nameのだけを取り出す
grep -E '^[^0-9]+'
⚪︎ipAdressのだけを取り出す
grep -E '^[0-9]+'

●ここからはsedとdrink.txtファイルを使う(Macの拡張正規は-E)

Ber
Beer
BeerBeer
BeerBeerBeer
Beeeeeeer!!!
My Vodka
My Wine

⚪︎BeerをWhiskyにはじめだけ書き換える   
sed 's/Beer/Whisky/' sed.txt    または　sed 's/^Beer/Whisky/g' sed.txt
⚪︎BeerをWhiskyに全部書き換える        
sed 's/Beer/Whisky/g' sed.txt
⚪︎!を取り除く

⚪︎１から５行目までを削除する
⚪︎５行目から最後まで削除する
⚪︎ファイルの内容を書き換えてバックアップを残す　     sed -i.bak ’s/~/~/g’  file.txt
⚪︎My Vodkaを—Vodka—にする      sed -E  ’s/My (.*)/—\1—/‘ drink.txt
⚪︎ディレクトリにあるファイルの拡張子.txtを.datに変える ls *.txt | sed "s/.txt/.dat/"
●sedコマンドを使う。以下のコマンドを使ってダミーデータを作っている、それを使う
echo {osaka,kyoto,kanagawa},{windows,Linux},{new,used} | tr " " "\n" > sed.txt
⚪︎すべてのnewをusedに変える
⚪︎osakaのLinuxだけをusedに変える  sed -E "s/(osaka,Linux),new/\1,used/" sed.txt
⚪︎Linux,windowsの前後のスペースを入れる  sed -E "s/(osaka|kyoto|kanagawa),(.+),(new|used)/\1, \2 ,\3 /" sed.txt
⚪︎地名の頭にkがついている行を削除する  sed /^k/d sed.txt

●lsコマンドを使う
⚪︎lsコマンドで表示される順番の基準は？
⚪︎隠しファイルを含めて出力する ls-a
⚪︎隠しファイルと通常のfileやディレクトリを表示するが、.と..は表示しない　ls  -A 
⚪︎ロングフォーマットでファイルを出力する. ls-l
⚪︎ロングフォーマットなしでフォルダかファイル、その他か判別できるように出力する   ls -F
⚪︎上で表示した時に * は何か？また @ も何か？
⚪︎ファイルの一覧を最終アクセス日を出力するls -t
⚪︎ファイルをアルファベットとは反転させて出力する ls -r
⚪︎ディレクトリの中身を再起的に含めてファイルを出力する ls-R
⚪︎ファイルやディレクトリを縦に並べる   ls -1
⚪︎ロングフォーマットで更新が古い順に並べる  ls -ltr
⚪︎ファイルサイズの大きい順に並べる  ls -Sl
⚪︎上で表示させたファイルサイズは少ないように思えるがなぜか？
⚪︎ユーザーホームからdesktopディレクトリのみのロングフォーマットを見る  ls -ld desktop
⚪︎ファイルのinodeを確認する    ls -i
⚪︎ハードリンクとシンボリックリンクのinodeの番号はどうなる？
⚪︎拡張子が .txt だけを抜き出す ls *.txt
⚪︎ファイルの容量を読みやすいように出力する    ls -lh
⚪︎上にもあるがオプションで -h は他のコマンドでもよく使われるがなぜか？

●sortコマンドでsort.dataを使う
⚪︎一列目を基準に昇順で並べる
⚪︎二列目を基準に降順で並べる
⚪︎num.csvの二行目を降順で並べる     sort -k 2 -t “,” -r num.csv
⚪︎/binディレクトリ以下のファイルをサイズの大きい順に並べる
⚪︎access.logファイルにインデックスをつけて表示する
●sortコマンドでsort_abc.dataを使う
⚪︎アルファベットの大文字、小文字を無視して並べ替える

●cutコマンドを使う
⚪︎dateコマンドで今日の日付を抜き出す
⚪︎/etc/passwdから1と6列目を抜き出してくる   cut -d : -f 1,6 /etc/passwd
⚪︎dateコマンド西暦の数字だけを抜き出す
⚪︎ls -lを使ってファイルタイプだけを抜き出す

●mkdirコマンドを使う
⚪︎何も指定せずに作ったディレクトリのパーミッションは
⚪︎個別ユーザのみディレクトリの変更ができないディレクトリを作る
⚪︎dir/dir2ディレクトリを作る
⚪︎上のに続けてdir/dir3を作る

●desktop/binを作る
⚪︎binに一時的にPATHを通す　export PATH=“$PATH:$HOME/bin”
⚪︎

●{}パラメータ展開を使う。その１。特別のディレクトリを作って、そこでする
⚪︎test0.txtからtest5.txtを一回のコマンドで作る     touch test{0..5}.txt
⚪︎パラメータ展開使わずにでtest6からtest9を作る          for i in $(seq 6 9); do touch test$i.txt; done 
⚪︎パラメータ展開で以下のを内容を作って、http.txtファイルに保存する
http.hello.com
http.world.com
https.hello.com
https.world.com

touch  {http, https}.{hello, world}.com  | tr " " "\n"   > http.txt
⚪︎上で作った中からランダムに２つ抜き出す
cat http.txt | sort -R | head -2
⚪︎上で作ったtest5.txt~test8.txtのファイルを削除する     rm *.txt

●{}パラメータ展開を使う。その２。
⚪︎test0.txtからtest50.txtを一回のコマンドで作る     touch test{0..50}.txt
⚪︎txtの拡張子の後に.bakをつける　　 for f in *.txt; do mv ${,.bak};done
⚪︎.bakを削除する              for f in file_{1..50}.txt; do mv $f{.bak,};done
⚪︎全部ファイルを削除する                             rm *.txt
⚪︎奇数だけのファイルをfile_1~file_30まで作る    for f in `seq 1 2 30`; do touch test_$f;done
⚪︎ファイルの一桁の番号だけ抜き出す          ls test_?

●duコマンドを使う
⚪︎デスクトップにあるファイルサイズを上位10個を順に並べる
du -s ~/desktop/* | sort -rn | head -10 | awk '{print $NF}' | xargs du -sh

●ルートディレクトリ直下のディレクトリに当てはまるものを以下から選ぶ
/dev  /etc  /home  /bin  /sbin  /lib  /tmp  /usr  /var 
⚪︎デバイスファイルが格納されている
⚪︎システムやミドルウェアに関する設定ファイルが格納されている
⚪︎ユーザごとのホームディレクトリが格納されている
⚪︎基本コマンドが格納されている
⚪︎システム管理者用のコマンドが格納されている
⚪︎/binや/sbinにあるコマンドを実行するのに必要なライブラリが格納されている
⚪︎仮想メモリ上の一時ファイルを格納している
⚪︎ユーザが共通的に利用するプログラムやライブラリが格納されている
⚪︎ログファイルなどが格納されている




